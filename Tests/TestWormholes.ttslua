function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end
local _systemHelper = getHelperClient('TI4_SYSTEM_HELPER')

function onLoad(save_state)
    print('onLoad')
    self.addContextMenuItem("WORMHOLES!", testWormholes)
end

function testWormholes()
    print('testWormholes')

    local guidToSystem = _systemHelper.systems()
    local wormholes = _systemHelper.wormholes()

    for wormhole, state in pairs(wormholes) do
        print('WORMHOLE ' .. wormhole .. ':')
        for i, guid in ipairs(state.guids) do
            local system = guidToSystem[guid]
            local object = getObjectFromGUID(guid)
            print(i .. ':' .. guid .. ' ' .. (system and system.string or object.getName()))
        end
        for i, connected in ipairs(state.connected) do
            print(i .. ':' .. connected)
        end
    end

    -- Also sanity check the hex logic.
    local hex = _systemHelper.hexFromPosition({x=0,y=0,z=0})
    print('hex: ' .. hex)
    local p = _systemHelper.hexToPosition(hex)
    print('p: ' .. p.x .. ', ' .. p.y .. ', ' .. p.z)

    local guidToHex = _systemHelper.hexesFromPositions({ ['abcd'] = {x=0,y=0,z=0}})
    print('hex[]: ' .. guidToHex['abcd'])

    local hexes = _systemHelper.hexNeighbors(hex)
    print('hexNeighbors: ' .. table.concat(hexes, ' '))

    local hexes = _systemHelper.hexAdjacentWormholes(hex)
    print('hexAdjacentWormholes: ' .. table.concat(hexes, ' '))
end

-------------------------------------------------------------------------------
-- Index is only called when the key does not already exist.
local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)
